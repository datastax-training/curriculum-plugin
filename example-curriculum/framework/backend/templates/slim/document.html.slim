doctype 5
html lang=(attr :lang, 'en' unless attr? :nolang)
  head
    meta http-equiv='expires' content='0'
    meta charset=(attr :encoding, 'utf-8')
    / QUESTION should we add maximum-scale=1 to viewport setting?
    meta name='viewport' content='width=device-width, initial-scale=1'
    title=(doctitle sanitize: true, use_fallback: true).tr_s(' ', ' ')
    - [:description, :keywords, :author, :copyright].each do |_key|
      - if attr? _key
        meta name=_key content=(attr _key)
    meta name='generator' content="Asciidoctor #{attr 'asciidoctor-version'} (Bespoke.js converter)"
    - if attr? :favicon
      - if (_favicon_href = attr :favicon).empty?
        - _favicon_href = 'favicon.ico'
      - if (_favicon_image_type = File.extname(_favicon_href)[1..-1]) == 'ico'
        - _favicon_image_type = 'x-icon'
      link rel='shortcut icon' href=_favicon_href type="image/#{_favicon_image_type}"
    meta name='mobile-web-app-capable' content='yes'
    - if attr? :appname
      meta name='application-name' content=(attr :appname)
    link rel='stylesheet' href='styles/datastax.css'
    - if attr? :icons, 'font'
      - if attr? 'iconfont-remote'
        link rel='stylesheet' href=(attr 'iconfont-cdn', (cdn_uri 'font-awesome', '4.5.0', 'css/font-awesome.min.css'))
      - else
        link rel='stylesheet' href=(normalize_web_path 'font-awesome.css', (attr :stylesdir, ''))
    - case (_source_highlighter = attr 'source-highlighter')
    - when 'highlight.js'
      link rel='stylesheet' href="#{_highlightjs_path = attr 'highlightjsdir', (cdn_uri 'highlight.js', '9.1.0')}/styles/#{attr 'highlightjs-theme', 'github'}.min.css"
    - when 'prettify'
      link rel='stylesheet' href="#{_prettify_path = attr 'prettifydir', (cdn_uri 'prettify', 'r298')}/#{attr 'prettify-theme', 'prettify'}.min.css"
    - unless (_docinfo = docinfo :head, '-bespoke.html').empty?
      =_docinfo

  body id=id
    article.deck
      - unless noheader
        / TODO enable :header docinfo once Asciidoctor 1.5.5 is available
        /- unless (_docinfo = docinfo :header, '-bespoke.html').empty?
        /  =_docinfo
        - if header?
          include slide_title.html.slim
      =content
      footer 
        p &copy; 2016 DataStax. Use only with permission. &bull; <span class="course-title"> COURSE TITLE [TODO] </span>
      - unless (_docinfo = docinfo :footer, '-bespoke.html').empty?
        =_docinfo
    script src='js/curriculum.js'
    - if attr? :customjs
      script src="#{attr :customjs, 'customjs.js'}"
    - case _source_highlighter
    - when 'highlight.js'
      script src="#{_highlightjs_path}/highlight.min.js"
      |<script>Array.prototype.forEach.call(document.querySelectorAll('i.conum+b'),function(n){n.parentNode.removeChild(n)});</script>
      |<script>hljs.initHighlighting()</script>
    - when 'prettify'
      script src="#{_prettify_path}/prettify.js"
      |<script>Array.prototype.forEach.call(document.querySelectorAll('i.conum+b'),function(n){n.parentNode.removeChild(n)})</script>
      |<script>prettyPrint()</script>
    - if attr? :stem
      script type='text/x-mathjax-config'
        |MathJax.Hub.Config({
           messageStyle: "none",
           tex2jax: {
             inlineMath: [#{Asciidoctor::INLINE_MATH_DELIMITERS[:latexmath].inspect}],
             displayMath: [#{Asciidoctor::BLOCK_MATH_DELIMITERS[:latexmath].inspect}],
             ignoreClass: "nostem|nolatexmath"
           },
           asciimath2jax: {
             delimiters: [#{Asciidoctor::BLOCK_MATH_DELIMITERS[:asciimath].inspect}],
             ignoreClass: "nostem|noasciimath"
           }
         })
      script src="#{cdn_uri 'mathjax', '2.6.0', 'MathJax.js?config=TeX-MML-AM_HTMLorMML'}"
